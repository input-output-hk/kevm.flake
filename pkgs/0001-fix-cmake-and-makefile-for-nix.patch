From eed76cd1d4eda5d30ce472b5525579ec1d7a486d Mon Sep 17 00:00:00 2001
From: Timothy DeHerrera <tim.deherrera@iohk.io>
Date: Sun, 12 Dec 2021 12:08:21 -0700
Subject: [PATCH] fix cmake and makefiles for nix

---
 Makefile                  | 87 +++++++++++++++++++++++----------------
 cmake/node/CMakeLists.txt | 51 ++++++-----------------
 2 files changed, 64 insertions(+), 74 deletions(-)

diff --git a/Makefile b/Makefile
index 1a1f0208..03591443 100644
--- a/Makefile
+++ b/Makefile
@@ -46,7 +46,7 @@ export PLUGIN_SUBMODULE
 
 .PHONY: all clean distclean                                                                                                      \
         deps k-deps plugin-deps libsecp256k1 libff protobuf                                                                      \
-        build build-haskell build-llvm build-provex build-node build-kevm                                                        \
+        build build-haskell build-llvm build-provex build-vm build-kevm                                                        \
         test test-all test-conformance test-rest-conformance test-all-conformance test-slow-conformance test-failing-conformance \
         test-vm test-rest-vm test-all-vm test-bchain test-rest-bchain test-all-bchain test-node                                  \
         test-prove test-failing-prove                                                                                            \
@@ -55,7 +55,7 @@ export PLUGIN_SUBMODULE
         test-parse test-failure                                                                                                  \
         test-interactive test-interactive-help test-interactive-run test-interactive-prove test-interactive-search               \
         media media-pdf metropolis-theme                                                                                         \
-        install uninstall
+        install uninstall nix-install
 .SECONDARY:
 
 all: build
@@ -70,16 +70,15 @@ distclean:
 # Non-K Dependencies
 # ------------------
 
-libsecp256k1_out := $(LOCAL_LIB)/pkgconfig/libsecp256k1.pc
-libff_out        := $(KEVM_LIB)/libff/lib/libff.a
-libcryptopp_out  := $(KEVM_LIB)/cryptopp/lib/libcryptopp.a
 protobuf_out     := $(LOCAL_LIB)/proto/proto/msg.pb.cc
 
-libsecp256k1: $(libsecp256k1_out)
-libff:        $(libff_out)
-libcryptopp : $(libcryptopp_out)
 protobuf:     $(protobuf_out)
 
+ifndef SYSTEM_LIBSECP256K1
+
+libsecp256k1_out := $(LOCAL_LIB)/pkgconfig/libsecp256k1.pc
+libsecp256k1: $(libsecp256k1_out)
+
 $(libsecp256k1_out): $(PLUGIN_SUBMODULE)/deps/secp256k1/autogen.sh
 	cd $(PLUGIN_SUBMODULE)/deps/secp256k1                                 \
 	    && ./autogen.sh                                                   \
@@ -87,6 +86,13 @@ $(libsecp256k1_out): $(PLUGIN_SUBMODULE)/deps/secp256k1/autogen.sh
 	    && $(MAKE)                                                        \
 	    && $(MAKE) install
 
+endif # ifndef SYSTEM_LIBSECP256K1
+
+ifndef SYSTEM_LIBFF
+
+libff_out := $(KEVM_LIB)/libff/lib/libff.a
+libff: $(libff_out)
+
 LIBFF_CMAKE_FLAGS :=
 
 ifeq ($(UNAME_S),Linux)
@@ -97,10 +103,6 @@ else
     LIBFF_CMAKE_FLAGS += -DWITH_PROCPS=OFF
 endif
 
-ifneq ($(APPLE_SILICON),)
-    LIBFF_CMAKE_FLAGS += -DCURVE=ALT_BN128 -DUSE_ASM=Off
-endif
-
 $(libff_out): $(PLUGIN_SUBMODULE)/deps/libff/CMakeLists.txt
 	@mkdir -p $(PLUGIN_SUBMODULE)/deps/libff/build
 	cd $(PLUGIN_SUBMODULE)/deps/libff/build                                                                     \
@@ -108,14 +110,23 @@ $(libff_out): $(PLUGIN_SUBMODULE)/deps/libff/CMakeLists.txt
 	    && make -s -j4                                                                                          \
 	    && make install DESTDIR=$(CURDIR)/$(BUILD_DIR)
 
+endif # ifndef SYSTEM_LIBFF
+
 $(protobuf_out): $(NODE_DIR)/proto/msg.proto
 	@mkdir -p $(LOCAL_LIB)/proto
 	protoc --cpp_out=$(LOCAL_LIB)/proto -I $(NODE_DIR) $(NODE_DIR)/proto/msg.proto
 
+ifndef SYSTEM_LIBCRYPTOPP
+
+libcryptopp_out  := $(KEVM_LIB)/cryptopp/lib/libcryptopp.a
+libcryptopp : $(libcryptopp_out)
+
 $(libcryptopp_out): $(PLUGIN_SUBMODULE)/deps/cryptopp/GNUmakefile
 	cd $(PLUGIN_SUBMODULE)/deps/cryptopp                            \
             && $(MAKE) install DESTDIR=$(CURDIR)/$(BUILD_DIR) PREFIX=$(INSTALL_LIB)/cryptopp
 
+endif # SYSTEM_LIBCRYPTOPP
+
 # K Dependencies
 # --------------
 
@@ -129,10 +140,6 @@ ifneq ($(SKIP_HASKELL),)
     K_MVN_ARGS += -Dhaskell.backend.skip
 endif
 
-ifneq ($(APPLE_SILICON),)
-    K_MVN_ARGS += -Dstack.extra-opts='--compiler ghc-8.10.7 --system-ghc'
-endif
-
 ifneq ($(RELEASE),)
     K_BUILD_TYPE := FastBuild
 else
@@ -204,7 +211,7 @@ $(KEVM_INCLUDE)/kframework/lemmas/%.k: tests/specs/%.k
 	@mkdir -p $(dir $@)
 	install $< $@
 
-KOMPILE_OPTS = -I $(INSTALL_INCLUDE)/kframework -I $(INSTALL_LIB)/blockchain-k-plugin/include/kframework
+KOMPILE_OPTS = --debug -I $(INSTALL_INCLUDE)/kframework -I $(INSTALL_LIB)/blockchain-k-plugin/include/kframework
 
 ifneq (,$(RELEASE))
     KOMPILE_OPTS += -O2
@@ -226,6 +233,7 @@ endif
 $(KEVM_LIB)/$(haskell_kompiled): $(kevm_includes) $(plugin_includes) $(KEVM_BIN)/kevm
 	$(KOMPILE) --backend haskell                     \
 	    $(haskell_main_file) $(HASKELL_KOMPILE_OPTS) \
+	    --directory $(KEVM_LIB)/$(haskell_dir)       \
 	    --main-module $(haskell_main_module)         \
 	    --syntax-module $(haskell_syntax_module)     \
 	    $(KOMPILE_OPTS)
@@ -246,6 +254,7 @@ endif
 $(KEVM_LIB)/$(llvm_kompiled): $(kevm_includes) $(plugin_includes) $(plugin_c_includes) $(libff_out) $(KEVM_BIN)/kevm
 	$(KOMPILE) --backend llvm                 \
 	    $(llvm_main_file)                     \
+	    --directory $(KEVM_LIB)/$(llvm_dir)   \
 	    --main-module $(llvm_main_module)     \
 	    --syntax-module $(llvm_syntax_module) \
 	    $(KOMPILE_OPTS)
@@ -265,6 +274,7 @@ export node_main_filename
 $(KEVM_LIB)/$(node_kore): $(kevm_includes) $(plugin_includes) $(plugin_c_includes) $(libff_out) $(KEVM_BIN)/kevm
 	$(KOMPILE) --backend node                 \
 	    $(node_main_file)                     \
+	    --directory $(KEVM_LIB)/$(node_dir)   \
 	    --main-module $(node_main_module)     \
 	    --syntax-module $(node_syntax_module) \
 	    $(KOMPILE_OPTS)
@@ -317,7 +327,7 @@ build: $(patsubst %, $(KEVM_BIN)/%, $(install_bins)) $(patsubst %, $(KEVM_LIB)/%
 
 build-llvm:    $(KEVM_LIB)/$(llvm_kompiled)    $(KEVM_LIB)/kore-json.py
 build-haskell: $(KEVM_LIB)/$(haskell_kompiled) $(KEVM_LIB)/kore-json.py
-build-node:    $(KEVM_LIB)/$(node_kompiled)
+build-vm:      $(KEVM_LIB)/$(node_kompiled)
 build-kevm:    $(KEVM_BIN)/kevm $(kevm_includes) $(lemma_includes) $(plugin_includes)
 
 all_bin_sources := $(shell find $(KEVM_BIN) -type f | sed 's|^$(KEVM_BIN)/||')
@@ -346,7 +356,7 @@ uninstall:
 # -----
 
 TEST_CONCRETE_BACKEND := llvm
-TEST_SYMBOLIC_BACKEND := haskell
+TEST_SYMBOLIC_BACKEND := java
 
 TEST_OPTIONS :=
 CHECK        := git --no-pager diff --no-index --ignore-all-space -R
@@ -377,8 +387,6 @@ tests/specs/bihu/functional-spec%:           KPROVE_MODULE =  FUNCTIONAL-SPEC-SY
 tests/specs/erc20/functional-spec%:          KPROVE_MODULE =  FUNCTIONAL-SPEC-SYNTAX
 tests/specs/examples/solidity-code-spec%:    KPROVE_EXT    =  md
 tests/specs/examples/solidity-code-spec%:    KPROVE_FILE   =  solidity-code-spec
-tests/specs/examples/erc20-spec%:            KPROVE_EXT    =  md
-tests/specs/examples/erc20-spec%:            KPROVE_FILE   =  erc20-spec
 tests/specs/examples/sum-to-n-spec%:         KPROVE_FILE   =  sum-to-n-spec
 tests/specs/functional/infinite-gas-spec%:   KPROVE_FILE   =  infinite-gas-spec
 tests/specs/functional/lemmas-no-smt-spec%:  KPROVE_FILE   =  lemmas-no-smt-spec
@@ -418,14 +426,14 @@ tests/%.parse: tests/%
 	$(CHECK) $@-out $@-expected
 	$(KEEP_OUTPUTS) || rm -rf $@-out
 
-tests/%.prove-legacy: tests/%
+tests/%.prove: tests/%
 	$(KEVM) prove $< --verif-module $(KPROVE_MODULE) $(TEST_OPTIONS) --backend $(TEST_SYMBOLIC_BACKEND) \
-	    --no-provex --format-failures $(KPROVE_OPTS) --concrete-rules-file $(dir $@)concrete-rules.txt
+	    --format-failures $(KPROVE_OPTS) --concrete-rules-file $(dir $@)concrete-rules.txt
 
 .SECONDEXPANSION:
-tests/specs/%.prove: tests/specs/% tests/specs/$$(firstword $$(subst /, ,$$*))/$$(KPROVE_FILE)/$(TEST_SYMBOLIC_BACKEND)/$$(KPROVE_FILE)-kompiled/timestamp
-	$(KEVM) prove $< $(TEST_OPTIONS) --backend $(TEST_SYMBOLIC_BACKEND) --format-failures $(KPROVE_OPTS) \
-	    --directory tests/specs/$(firstword $(subst /, ,$*))/$(KPROVE_FILE)/$(TEST_SYMBOLIC_BACKEND)
+tests/specs/%.provex: tests/specs/% tests/specs/$$(firstword $$(subst /, ,$$*))/$$(KPROVE_FILE)/$(TEST_SYMBOLIC_BACKEND)/$$(KPROVE_FILE)-kompiled/timestamp
+	$(KEVM) prove $< $(TEST_OPTIONS) --backend $(TEST_SYMBOLIC_BACKEND) --format-failures $(KPROVE_OPTS)        \
+	    --provex --backend-dir tests/specs/$(firstword $(subst /, ,$*))/$(KPROVE_FILE)/$(TEST_SYMBOLIC_BACKEND)
 
 tests/specs/%-kompiled/timestamp: tests/specs/$$(firstword $$(subst /, ,$$*))/$$(KPROVE_FILE).$$(KPROVE_EXT) tests/specs/$$(firstword $$(subst /, ,$$*))/concrete-rules.txt $(kevm_includes) $(lemma_includes) $(plugin_includes) $(KEVM_BIN)/kevm
 	$(KOMPILE) --backend $(word 3, $(subst /, , $*)) $<                                                 \
@@ -525,19 +533,19 @@ provex_definitions :=
 build-provex: $(provex_definitions)
 
 test-prove: test-prove-benchmarks test-prove-functional test-prove-opcodes test-prove-erc20 test-prove-bihu test-prove-examples test-prove-mcd test-prove-optimizations
-test-prove-benchmarks:    $(prove_benchmarks_tests:=.prove)
-test-prove-functional:    $(prove_functional_tests:=.prove)
-test-prove-opcodes:       $(prove_opcodes_tests:=.prove)
-test-prove-erc20:         $(prove_erc20_tests:=.prove)
-test-prove-bihu:          $(prove_bihu_tests:=.prove)
-test-prove-examples:      $(prove_examples_tests:=.prove)
-test-prove-mcd:           $(prove_mcd_tests:=.prove)
-test-prove-optimizations: $(prove_optimization_tests:=.prove)
+test-prove-benchmarks:    $(prove_benchmarks_tests:=.provex)
+test-prove-functional:    $(prove_functional_tests:=.provex)
+test-prove-opcodes:       $(prove_opcodes_tests:=.provex)
+test-prove-erc20:         $(prove_erc20_tests:=.provex)
+test-prove-bihu:          $(prove_bihu_tests:=.provex)
+test-prove-examples:      $(prove_examples_tests:=.provex)
+test-prove-mcd:           $(prove_mcd_tests:=.provex)
+test-prove-optimizations: $(prove_optimization_tests:=.provex)
 
 test-failing-prove: $(prove_failing_tests:=.prove)
 
 test-klab-prove: KPROVE_OPTS += --debugger
-test-klab-prove: $(smoke_tests_prove:=.prove)
+test-klab-prove: $(smoke_tests_prove:=.provex)
 
 # to generate optimizations.md, run: ./optimizer/optimize.sh &> output
 tests/specs/opcodes/evm-optimizations-spec.md: optimizations.md
@@ -609,3 +617,12 @@ metropolis-theme: $(BUILD_DIR)/media/metropolis/beamerthememetropolis.sty
 
 $(BUILD_DIR)/media/metropolis/beamerthememetropolis.sty:
 	cd $(dir $@) && $(MAKE)
+
+# Nix
+
+nix-install: deps/k_release
+	nix-env -f . -i kevm
+
+deps/k_release:
+	git --git-dir=deps/k/.git tag --points-at HEAD > $@
+
diff --git a/cmake/node/CMakeLists.txt b/cmake/node/CMakeLists.txt
index 506817c8..48676a47 100644
--- a/cmake/node/CMakeLists.txt
+++ b/cmake/node/CMakeLists.txt
@@ -1,33 +1,18 @@
 cmake_minimum_required (VERSION 3.4)
 
-if(APPLE)
-  if(DEFINED ENV{HOMEBREW_PREFIX})
-    set(BREW_PREFIX $ENV{HOMEBREW_PREFIX})
-  else()
-    execute_process(
-      COMMAND brew --prefix
-      OUTPUT_VARIABLE BREW_PREFIX
-      ERROR_VARIABLE BREW_ERROR
-      RESULT_VARIABLE BREW_RESULT
-      OUTPUT_STRIP_TRAILING_WHITESPACE)
-
-    if(NOT BREW_RESULT EQUAL 0)
-      message(WARNING "Error running brew --prefix; you may need to manually configure package search paths.")
-      message(WARNING "  : ${BREW_ERROR}")
-    endif() # BREW_RESULT
-  endif() # ENV{HOMEBREW_PREFIX}
-
-  message(STATUS "Looking for Homebrew dependencies in ${BREW_PREFIX}")
-  include_directories(AFTER SYSTEM "${BREW_PREFIX}/include")
-  link_directories(AFTER "${BREW_PREFIX}/lib")
-endif() # APPLE
-
 execute_process(COMMAND which kompile OUTPUT_VARIABLE KOMPILE_PATH
     OUTPUT_STRIP_TRAILING_WHITESPACE)
 execute_process(COMMAND dirname ${KOMPILE_PATH} OUTPUT_VARIABLE K_BIN
     OUTPUT_STRIP_TRAILING_WHITESPACE)
+# LLVMKompilePrelude and LLVMKompile are located in the llvm-backend package when building
+# with nix.
+execute_process(COMMAND which llvm-kompile OUTPUT_VARIABLE LLVM_PATH
+    OUTPUT_STRIP_TRAILING_WHITESPACE)
+execute_process(COMMAND dirname ${LLVM_PATH} OUTPUT_VARIABLE LLVM_BIN
+    OUTPUT_STRIP_TRAILING_WHITESPACE)
 set(K_LIB ${K_BIN}/../lib)
-list(APPEND CMAKE_MODULE_PATH "${K_LIB}/cmake/kframework")
+set(LLVM_LIB ${LLVM_BIN}/../lib)
+list(APPEND CMAKE_MODULE_PATH "${K_LIB}/cmake/kframework" "${LLVM_LIB}/cmake/kframework")
 include(LLVMKompilePrelude)
 project (KevmVm CXX)
 
@@ -35,13 +20,7 @@ set(KOMPILED_DIR $ENV{KEVM_LIB_ABS}/$ENV{node_dir}/$ENV{node_main_filename}-komp
 set(KOMPILE_USE_MAIN "library")
 set(TARGET_NAME "kevm-vm")
 
-link_directories(AFTER SYSTEM
-  $ENV{LIBRARY_PATH}
-  $ENV{KEVM_LIB_ABS}/cryptopp/lib)
-
-if(APPLE)
-  link_directories(AFTER SYSTEM "${BREW_PREFIX}/opt/openssl/lib")
-endif()
+link_directories(AFTER SYSTEM $ENV{LIBRARY_PATH})
 
 add_executable(kevm-vm
 	$ENV{NODE_DIR}/vm/init.cpp
@@ -59,11 +38,6 @@ if(UNIX AND NOT APPLE)
 	set(LINK_PROCPS procps)
 endif()
 
-if (APPLE)
-  target_include_directories(kevm-vm
-    PUBLIC "${BREW_PREFIX}/opt/openssl/include")
-endif()
-
 target_include_directories(kevm-vm
 	PUBLIC $ENV{PLUGIN_SUBMODULE}/plugin-c
 	PUBLIC $ENV{LOCAL_LIB}/proto
@@ -72,12 +46,11 @@ target_include_directories(kevm-vm
 	PUBLIC $ENV{NODE_DIR}/vm/kevm
 	PUBLIC ${CMAKE_SOURCE_DIR}/..
 	PUBLIC $ENV{KEVM_LIB_ABS}/libff/include
-	PUBLIC $ENV{KEVM_LIB_ABS}/cryptopp/include
-	PUBLIC ${K_LIB}/../include/kllvm)
+	PUBLIC ${K_LIB}/../include/kllvm
+	PUBLIC ${LLVM_BIN}/../include/kllvm)
 target_compile_options(kevm-vm
 	PUBLIC $ENV{LLVM_KOMPILE_OPTS}
-	PUBLIC -Wall -Werror)
+	PUBLIC -Wall -Werror -Wno-unused-command-line-argument -Wno-unused-result)
 target_link_libraries(kevm-vm
 	ff protobuf gmp ${LINK_PROCPS} cryptopp secp256k1 crypto)
-
 include(LLVMKompile)
-- 
2.34.0

